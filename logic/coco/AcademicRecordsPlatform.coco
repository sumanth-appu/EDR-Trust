// Coco AcademicRecordsPlatform
coco AcademicRecordsPlatform

// Declare Persistent State
state persistent:
    records []Record
    studentIds Map[U64]Bool
    admin Address

// Declare Record Class
class Record:
    field recordId U64              // Unique identifier for each academic record
    field studentName String        // Name of the student
    field studentId U64             // Student ID
    field courses Map[String]U64    // Map containing courses(string) => grades (unsinged int)


////////////////////////
// Mutate Endpoints
////////////////////////

endpoint deployer Init!():
    mutate Address(Sender) -> AcademicRecordsPlatform.State.admin


// Only building for admin uploads for ver_1
func onlyAdmin():
    observe admin <- AcademicRecordsPlatform.State.admin:
        if(Address(Sender) != admin):
            throw "Not an Admin"

// Add a new academic record
endpoint invokable AddRecord!(studentName String, studentId U64)->(addedRecord Record):
    // Yield the added record to the caller
    onlyAdmin()
    
    //Check if studentName is valid
    if studentName=="":
        throw "Student Name is not valid"
    
    observe studentIds <- AcademicRecordsPlatform.State.studentIds:
        if studentIds[studentId]?:
            throw "StudentId already exists"
    
    mutate studentIds <- AcademicRecordsPlatform.State.studentIds:
        studentIds[studentId] = true
    
    mutate records <- AcademicRecordsPlatform.State.records:
        var newRecord = Record{recordId: len(records), studentName: studentName, studentId:studentId}
        records = append(records, newRecord)
        yield addedRecord newRecord


// Add a course to an academic record
endpoint invokable AddCourse!(recordId U64, courseName String, grade U64):
    //check if grade is valid
    if grade > 100:
        throw "grade must be less than 100"
    if grade < 0:
        throw "grade must be greater than 0"
        
    onlyAdmin()

    // Check if the record exists
    var recordLen U64
    observe records <- AcademicRecordsPlatform.State.records:
        recordLen = len(records)
    
    if  recordId >= recordLen:
        throw "Record Not Found"
    
    //adding or updating the course grade
    mutate records <- AcademicRecordsPlatform.State.records:
        records[recordId].courses[courseName] = grade

////////////////////////
// Observe Endpoints
///////////////////////

endpoint invokable isAdmin() ->(result Bool): 
    observe admin <- AcademicRecordsPlatform.State.admin:
        yield result (Address(Sender) == admin)
     
// Get all academic records
endpoint invokable GetRecords()->(records []Record):
    // Observe records from the persistent state and yield
    observe records <- AcademicRecordsPlatform.State.records